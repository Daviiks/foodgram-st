name: Build and Deploy

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      DOCKER_REGISTRY: docker.io
      IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/foodgram

    steps:
      - uses: actions/checkout@v4

      # 1. Создаем .env
      - name: Create .env
        run: |
          cat <<EOF > .env
          DB_ENGINE=django.db.backends.postgresql
          DB_NAME=${{ secrets.DB_NAME }}
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          DB_HOST=db
          DB_PORT=5432
          SECRET_KEY=${{ secrets.SECRET_KEY }}
          EOF

      # 2. Запускаем контейнеры
      - name: Start services
        run: |
          docker compose -f infra/docker-compose.yml up -d backend db
          docker compose -f infra/docker-compose.yml exec -T db \
            sh -c 'while ! pg_isready -U $POSTGRES_USER; do sleep 2; done'

      # 3. Миграции и загрузка данных
      - name: Prepare database
        run: |
          docker compose -f infra/docker-compose.yml exec -T backend \
            python manage.py migrate
          
          docker compose -f infra/docker-compose.yml cp data/ingredients.csv backend:/app/data/
          docker compose -f infra/docker-compose.yml exec -T backend \
            python manage.py load_ingredients /app/data/ingredients.csv

      - name: Start services for testing
        run: |
          docker compose -f ./infra/docker-compose.yml --env-file ./.env up -d backend db
          docker compose -f ./infra/docker-compose.yml exec -T backend sh -c 'while ! curl -s http://localhost:8000; do sleep 1; done'

      - name: Run API tests
        uses: matt-ball/newman-action@master
        with:
          collection: ./postman_collection/foodgram.postman_collection.json
